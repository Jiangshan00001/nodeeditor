!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
CONNECTION_STYLE_CHECK_UNDEFINED_VALUE	ConnectionStyle.cpp	/^  #define CONNECTION_STYLE_CHECK_UNDEFINED_VALUE(/;"	d	file:
CONNECTION_STYLE_READ_BOOL	ConnectionStyle.cpp	/^#define CONNECTION_STYLE_READ_BOOL(/;"	d	file:
CONNECTION_STYLE_READ_COLOR	ConnectionStyle.cpp	/^#define CONNECTION_STYLE_READ_COLOR(/;"	d	file:
CONNECTION_STYLE_READ_FLOAT	ConnectionStyle.cpp	/^#define CONNECTION_STYLE_READ_FLOAT(/;"	d	file:
CONNECTION_VALUE_EXISTS	ConnectionStyle.cpp	/^#define CONNECTION_VALUE_EXISTS(/;"	d	file:
Connection	Connection.cpp	/^Connection(Node& nodeIn,$/;"	f	class:Connection
Connection	Connection.cpp	/^Connection(PortType portType,$/;"	f	class:Connection
ConnectionBlurEffect	ConnectionBlurEffect.cpp	/^ConnectionBlurEffect(ConnectionGraphicsObject*)$/;"	f	class:ConnectionBlurEffect
ConnectionBlurEffect	ConnectionBlurEffect.hpp	/^class ConnectionBlurEffect : public QGraphicsBlurEffect$/;"	c	namespace:QtNodes
ConnectionGeometry	ConnectionGeometry.cpp	/^ConnectionGeometry()$/;"	f	class:ConnectionGeometry
ConnectionGraphicsObject	ConnectionGraphicsObject.cpp	/^ConnectionGraphicsObject(FlowScene &scene,$/;"	f	class:ConnectionGraphicsObject
ConnectionPainter	ConnectionPainter.hpp	/^class ConnectionPainter$/;"	c	namespace:QtNodes
ConnectionStyle	ConnectionStyle.cpp	/^ConnectionStyle()$/;"	f	class:ConnectionStyle
ConnectionStyle	ConnectionStyle.cpp	/^ConnectionStyle(QString jsonText)$/;"	f	class:ConnectionStyle
FLOW_VIEW_STYLE_CHECK_UNDEFINED_VALUE	FlowViewStyle.cpp	/^  #define FLOW_VIEW_STYLE_CHECK_UNDEFINED_VALUE(/;"	d	file:
FLOW_VIEW_STYLE_READ_COLOR	FlowViewStyle.cpp	/^#define FLOW_VIEW_STYLE_READ_COLOR(/;"	d	file:
FlowScene	FlowScene.cpp	/^FlowScene(QObject * parent)$/;"	f	class:FlowScene
FlowScene	FlowScene.cpp	/^FlowScene(std::shared_ptr<DataModelRegistry> registry,$/;"	f	class:FlowScene
FlowView	FlowView.cpp	/^FlowView(FlowScene *scene, QWidget *parent)$/;"	f	class:FlowView
FlowView	FlowView.cpp	/^FlowView(QWidget *parent)$/;"	f	class:FlowView
FlowViewStyle	FlowViewStyle.cpp	/^FlowViewStyle()$/;"	f	class:FlowViewStyle
FlowViewStyle	FlowViewStyle.cpp	/^FlowViewStyle(QString jsonText)$/;"	f	class:FlowViewStyle
NODE_STYLE_CHECK_UNDEFINED_VALUE	NodeStyle.cpp	/^  #define NODE_STYLE_CHECK_UNDEFINED_VALUE(/;"	d	file:
NODE_STYLE_READ_COLOR	NodeStyle.cpp	/^#define NODE_STYLE_READ_COLOR(/;"	d	file:
NODE_STYLE_READ_FLOAT	NodeStyle.cpp	/^#define NODE_STYLE_READ_FLOAT(/;"	d	file:
Node	Node.cpp	/^Node(std::unique_ptr<NodeDataModel> && dataModel)$/;"	f	class:Node
NodeConnectionInteraction	NodeConnectionInteraction.cpp	/^NodeConnectionInteraction(Node& node, Connection& connection, FlowScene& scene)$/;"	f	class:NodeConnectionInteraction
NodeConnectionInteraction	NodeConnectionInteraction.hpp	/^class NodeConnectionInteraction$/;"	c	namespace:QtNodes
NodeDataModel	NodeDataModel.cpp	/^NodeDataModel()$/;"	f	class:NodeDataModel
NodeGeometry	NodeGeometry.cpp	/^NodeGeometry(std::unique_ptr<NodeDataModel> const &dataModel)$/;"	f	class:NodeGeometry
NodeGraphicsObject	NodeGraphicsObject.cpp	/^NodeGraphicsObject(FlowScene &scene,$/;"	f	class:NodeGraphicsObject
NodePainter	NodePainter.hpp	/^class NodePainter$/;"	c	namespace:QtNodes
NodeState	NodeState.cpp	/^NodeState(std::unique_ptr<NodeDataModel> const &model)$/;"	f	class:NodeState
NodeStyle	NodeStyle.cpp	/^NodeStyle()$/;"	f	class:NodeStyle
NodeStyle	NodeStyle.cpp	/^NodeStyle(QString jsonText)$/;"	f	class:NodeStyle
Properties	Properties.hpp	/^class NODE_EDITOR_PUBLIC Properties$/;"	c	namespace:QtNodes
QtNodes	ConnectionBlurEffect.hpp	/^namespace QtNodes$/;"	n
QtNodes	ConnectionPainter.hpp	/^namespace QtNodes$/;"	n
QtNodes	FlowScene.cpp	/^namespace QtNodes$/;"	n	file:
QtNodes	NodeConnectionInteraction.hpp	/^namespace QtNodes$/;"	n
QtNodes	NodePainter.hpp	/^namespace QtNodes$/;"	n
QtNodes	Properties.hpp	/^namespace QtNodes$/;"	n
QtNodes	StyleCollection.hpp	/^namespace QtNodes$/;"	n
StyleCollection	StyleCollection.hpp	/^class StyleCollection$/;"	c	namespace:QtNodes
__anon041d5cdc0102	FlowScene.cpp	/^          [this](Connection const& c) {$/;"	f	function:FlowScene::createConnection	file:
__anon041d5cdc0202	FlowScene.cpp	/^  {$/;"	f	function:FlowScene::restoreConnection	file:
__anon041d5cdc0302	FlowScene.cpp	/^    {$/;"	f	function:FlowScene::iterateOverNodeDataDependentOrder	file:
__anon041d5cdc0402	FlowScene.cpp	/^    {$/;"	f	function:FlowScene::iterateOverNodeDataDependentOrder	file:
__anon041d5cdc0502	FlowScene.cpp	/^                 [](std::pair<QUuid const, std::unique_ptr<Node>> const & p) { return p.second.g/;"	f	function:FlowScene::allNodes	file:
__anon041d5cdc0602	FlowScene.cpp	/^    {$/;"	f	function:QtNodes::locateNodeAt	file:
__anon9e6298a60102	Connection.cpp	/^      {$/;"	f	function:Connection::save	file:
__anonc99600e90102	FlowView.cpp	/^  {$/;"	f	function:FlowView::contextMenuEvent	file:
__anonc99600e90202	FlowView.cpp	/^  {$/;"	f	function:FlowView::contextMenuEvent	file:
__anonc99600e90302	FlowView.cpp	/^    {$/;"	f	function:FlowView::drawBackground	file:
__anond52af8a40102	NodeGraphicsObject.cpp	/^  auto onMoveSlot = [this] {$/;"	f	function:NodeGraphicsObject::NodeGraphicsObject	file:
_connection	NodeConnectionInteraction.hpp	/^  Connection* _connection;$/;"	m	class:QtNodes::NodeConnectionInteraction	typeref:typename:Connection *
_connectionStyle	StyleCollection.hpp	/^  ConnectionStyle _connectionStyle;$/;"	m	class:QtNodes::StyleCollection	typeref:typename:ConnectionStyle
_flowViewStyle	StyleCollection.hpp	/^  FlowViewStyle _flowViewStyle;$/;"	m	class:QtNodes::StyleCollection	typeref:typename:FlowViewStyle
_node	NodeConnectionInteraction.hpp	/^  Node* _node;$/;"	m	class:QtNodes::NodeConnectionInteraction	typeref:typename:Node *
_nodeStyle	StyleCollection.hpp	/^  NodeStyle _nodeStyle;$/;"	m	class:QtNodes::StyleCollection	typeref:typename:NodeStyle
_scene	NodeConnectionInteraction.hpp	/^  FlowScene* _scene;$/;"	m	class:QtNodes::NodeConnectionInteraction	typeref:typename:FlowScene *
_values	Properties.hpp	/^  QVariantMap _values;$/;"	m	class:QtNodes::Properties	typeref:typename:QVariantMap
addGraphicsEffect	ConnectionGraphicsObject.cpp	/^addGraphicsEffect()$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
allNodes	FlowScene.cpp	/^allNodes() const$/;"	f	class:FlowScene	typeref:typename:std::vector<Node * >
boundingRect	ConnectionGeometry.cpp	/^boundingRect() const$/;"	f	class:ConnectionGeometry	typeref:typename:QRectF
boundingRect	ConnectionGraphicsObject.cpp	/^boundingRect() const$/;"	f	class:ConnectionGraphicsObject	typeref:typename:QRectF
boundingRect	NodeGeometry.cpp	/^boundingRect() const$/;"	f	class:NodeGeometry	typeref:typename:QRectF
boundingRect	NodeGraphicsObject.cpp	/^boundingRect() const$/;"	f	class:NodeGraphicsObject	typeref:typename:QRectF
calculateNodePositionBetweenNodePorts	NodeGeometry.cpp	/^calculateNodePositionBetweenNodePorts(PortIndex targetPortIndex, PortType targetPort, Node* targ/;"	f	class:NodeGeometry	typeref:typename:QPointF
canConnect	NodeConnectionInteraction.cpp	/^canConnect(PortIndex &portIndex, TypeConverter & converter) const$/;"	f	class:NodeConnectionInteraction	typeref:typename:bool
captionHeight	NodeGeometry.cpp	/^captionHeight() const$/;"	f	class:NodeGeometry	typeref:typename:unsigned int
captionWidth	NodeGeometry.cpp	/^captionWidth() const$/;"	f	class:NodeGeometry	typeref:typename:unsigned int
categories	DataModelRegistry.cpp	/^categories() const$/;"	f	class:DataModelRegistry	typeref:typename:DataModelRegistry::CategoriesSet const &
checkHitScenePoint	NodeGeometry.cpp	/^checkHitScenePoint(PortType portType,$/;"	f	class:NodeGeometry	typeref:typename:PortIndex
clearNode	Connection.cpp	/^clearNode(PortType portType)$/;"	f	class:Connection	typeref:typename:void
clearScene	FlowScene.cpp	/^clearScene()$/;"	f	class:FlowScene	typeref:typename:void
clearSelectionAction	FlowView.cpp	/^clearSelectionAction() const$/;"	f	class:FlowView	typeref:typename:QAction *
complete	Connection.cpp	/^complete() const$/;"	f	class:Connection	typeref:typename:bool
connection	ConnectionGraphicsObject.cpp	/^connection()$/;"	f	class:ConnectionGraphicsObject	typeref:typename:QtNodes::Connection &
connectionEndScenePosition	NodeConnectionInteraction.cpp	/^connectionEndScenePosition(PortType portType) const$/;"	f	class:NodeConnectionInteraction	typeref:typename:QPointF
connectionGeometry	Connection.cpp	/^connectionGeometry() const$/;"	f	class:Connection	typeref:typename:ConnectionGeometry const &
connectionGeometry	Connection.cpp	/^connectionGeometry()$/;"	f	class:Connection	typeref:typename:ConnectionGeometry &
connectionRequiredPort	NodeConnectionInteraction.cpp	/^connectionRequiredPort() const$/;"	f	class:NodeConnectionInteraction	typeref:typename:PortType
connectionState	Connection.cpp	/^connectionState() const$/;"	f	class:Connection	typeref:typename:ConnectionState const &
connectionState	Connection.cpp	/^connectionState()$/;"	f	class:Connection	typeref:typename:ConnectionState &
connectionStyle	StyleCollection.cpp	/^connectionStyle()$/;"	f	class:StyleCollection	typeref:typename:ConnectionStyle const &
connections	FlowScene.cpp	/^connections() const$/;"	f	class:FlowScene	typeref:typename:std::unordered_map<QUuid,std::shared_ptr<Connection>> const &
connections	NodeState.cpp	/^connections(PortType portType, PortIndex portIndex) const$/;"	f	class:NodeState	typeref:typename:NodeState::ConnectionPtrSet
constructionColor	ConnectionStyle.cpp	/^constructionColor() const$/;"	f	class:ConnectionStyle	typeref:typename:QColor
constructionLineWidth	ConnectionStyle.cpp	/^constructionLineWidth() const$/;"	f	class:ConnectionStyle	typeref:typename:float
contextMenuEvent	FlowView.cpp	/^contextMenuEvent(QContextMenuEvent *event)$/;"	f	class:FlowView	typeref:typename:void
contextMenuEvent	NodeGraphicsObject.cpp	/^contextMenuEvent(QGraphicsSceneContextMenuEvent* event)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
create	DataModelRegistry.cpp	/^create(QString const &modelName)$/;"	f	class:DataModelRegistry	typeref:typename:std::unique_ptr<NodeDataModel>
createConnection	FlowScene.cpp	/^createConnection(Node& nodeIn,$/;"	f	class:FlowScene	typeref:typename:std::shared_ptr<Connection>
createConnection	FlowScene.cpp	/^createConnection(PortType connectedPort,$/;"	f	class:FlowScene	typeref:typename:std::shared_ptr<Connection>
createNode	FlowScene.cpp	/^createNode(std::unique_ptr<NodeDataModel> && dataModel)$/;"	f	class:FlowScene	typeref:typename:Node &
cubicPath	ConnectionPainter.cpp	/^cubicPath(ConnectionGeometry const& geom)$/;"	f	typeref:typename:QPainterPath	file:
dataType	Connection.cpp	/^dataType(PortType portType) const$/;"	f	class:Connection	typeref:typename:NodeDataType
debugDrawing	ConnectionPainter.cpp	/^debugDrawing(QPainter * painter,$/;"	f	typeref:typename:void	file:
deleteConnection	FlowScene.cpp	/^deleteConnection(Connection& connection)$/;"	f	class:FlowScene	typeref:typename:void
deleteSelectedNodes	FlowView.cpp	/^deleteSelectedNodes()$/;"	f	class:FlowView	typeref:typename:void
deleteSelectionAction	FlowView.cpp	/^deleteSelectionAction() const$/;"	f	class:FlowView	typeref:typename:QAction *
disconnect	NodeConnectionInteraction.cpp	/^disconnect(PortType portToDisconnect) const$/;"	f	class:NodeConnectionInteraction	typeref:typename:bool
draw	ConnectionBlurEffect.cpp	/^draw(QPainter* painter)$/;"	f	class:ConnectionBlurEffect	typeref:typename:void
drawBackground	FlowView.cpp	/^drawBackground(QPainter* painter, const QRectF& r)$/;"	f	class:FlowView	typeref:typename:void
drawConnectionPoints	NodePainter.cpp	/^drawConnectionPoints(QPainter* painter,$/;"	f	class:NodePainter	typeref:typename:void
drawEntryLabels	NodePainter.cpp	/^drawEntryLabels(QPainter * painter,$/;"	f	class:NodePainter	typeref:typename:void
drawFilledConnectionPoints	NodePainter.cpp	/^drawFilledConnectionPoints(QPainter * painter,$/;"	f	class:NodePainter	typeref:typename:void
drawHoveredOrSelected	ConnectionPainter.cpp	/^drawHoveredOrSelected(QPainter * painter,$/;"	f	typeref:typename:void	file:
drawModelName	NodePainter.cpp	/^drawModelName(QPainter * painter,$/;"	f	class:NodePainter	typeref:typename:void
drawNodeRect	NodePainter.cpp	/^drawNodeRect(QPainter* painter,$/;"	f	class:NodePainter	typeref:typename:void
drawNormalLine	ConnectionPainter.cpp	/^drawNormalLine(QPainter * painter,$/;"	f	typeref:typename:void	file:
drawResizeRect	NodePainter.cpp	/^drawResizeRect(QPainter * painter,$/;"	f	class:NodePainter	typeref:typename:void
drawSketchLine	ConnectionPainter.cpp	/^drawSketchLine(QPainter * painter,$/;"	f	typeref:typename:void	file:
drawValidationRect	NodePainter.cpp	/^drawValidationRect(QPainter * painter,$/;"	f	class:NodePainter	typeref:typename:void
embedQWidget	NodeGraphicsObject.cpp	/^embedQWidget()$/;"	f	class:NodeGraphicsObject	typeref:typename:void
entryBoundingRect	NodeGeometry.cpp	/^entryBoundingRect() const$/;"	f	class:NodeGeometry	typeref:typename:QRectF
equivalentWidgetHeight	NodeGeometry.cpp	/^equivalentWidgetHeight() const$/;"	f	class:NodeGeometry	typeref:typename:int
eraseConnection	NodeState.cpp	/^eraseConnection(PortType portType,$/;"	f	class:NodeState	typeref:typename:void
flowViewStyle	StyleCollection.cpp	/^flowViewStyle()$/;"	f	class:StyleCollection	typeref:typename:FlowViewStyle const &
get	Properties.hpp	/^  get(QString name, T* v) const$/;"	f	class:QtNodes::Properties	typeref:typename:bool
getConnectionGraphicsObject	Connection.cpp	/^getConnectionGraphicsObject() const$/;"	f	class:Connection	typeref:typename:ConnectionGraphicsObject &
getEndPoint	ConnectionGeometry.cpp	/^getEndPoint(PortType portType) const$/;"	f	class:ConnectionGeometry	typeref:typename:QPointF const &
getEntries	NodeState.cpp	/^getEntries(PortType portType) const$/;"	f	class:NodeState	typeref:typename:std::vector<NodeState::ConnectionPtrSet> const &
getEntries	NodeState.cpp	/^getEntries(PortType portType)$/;"	f	class:NodeState	typeref:typename:std::vector<NodeState::ConnectionPtrSet> &
getNode	Connection.cpp	/^getNode(PortType portType) const$/;"	f	class:Connection	typeref:typename:Node *
getNode	Connection.cpp	/^getNode(PortType portType)$/;"	f	class:Connection	typeref:typename:Node * &
getNodePosition	FlowScene.cpp	/^getNodePosition(const Node& node) const$/;"	f	class:FlowScene	typeref:typename:QPointF
getNodeSize	FlowScene.cpp	/^getNodeSize(const Node& node) const$/;"	f	class:FlowScene	typeref:typename:QSizeF
getPainterStroke	ConnectionPainter.cpp	/^getPainterStroke(ConnectionGeometry const& geom)$/;"	f	class:ConnectionPainter	typeref:typename:QPainterPath
getPortIndex	Connection.cpp	/^getPortIndex(PortType portType) const$/;"	f	class:Connection	typeref:typename:PortIndex
getTypeConverter	DataModelRegistry.cpp	/^getTypeConverter(NodeDataType const & d1,$/;"	f	class:DataModelRegistry	typeref:typename:TypeConverter
hoverEnterEvent	ConnectionGraphicsObject.cpp	/^hoverEnterEvent(QGraphicsSceneHoverEvent* event)$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
hoverEnterEvent	NodeGraphicsObject.cpp	/^hoverEnterEvent(QGraphicsSceneHoverEvent * event)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
hoverLeaveEvent	ConnectionGraphicsObject.cpp	/^hoverLeaveEvent(QGraphicsSceneHoverEvent* event)$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
hoverLeaveEvent	NodeGraphicsObject.cpp	/^hoverLeaveEvent(QGraphicsSceneHoverEvent * event)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
hoverMoveEvent	NodeGraphicsObject.cpp	/^hoverMoveEvent(QGraphicsSceneHoverEvent * event)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
hoveredColor	ConnectionStyle.cpp	/^hoveredColor() const$/;"	f	class:ConnectionStyle	typeref:typename:QColor
id	Connection.cpp	/^id() const$/;"	f	class:Connection	typeref:typename:QUuid
id	Node.cpp	/^id() const$/;"	f	class:Node	typeref:typename:QUuid
initResources	ConnectionStyle.cpp	/^inline void initResources() { Q_INIT_RESOURCE(resources); }$/;"	f	typeref:typename:void
initResources	FlowViewStyle.cpp	/^inline void initResources() { Q_INIT_RESOURCE(resources); }$/;"	f	typeref:typename:void
initResources	NodeStyle.cpp	/^inline void initResources() { Q_INIT_RESOURCE(resources); }$/;"	f	typeref:typename:void
instance	StyleCollection.cpp	/^instance()$/;"	f	class:StyleCollection	typeref:typename:StyleCollection &
interactWithNode	ConnectionState.cpp	/^interactWithNode(Node* node)$/;"	f	class:ConnectionState	typeref:typename:void
isReacting	NodeState.cpp	/^isReacting() const$/;"	f	class:NodeState	typeref:typename:bool
itemChange	NodeGraphicsObject.cpp	/^itemChange(GraphicsItemChange change, const QVariant &value)$/;"	f	class:NodeGraphicsObject	typeref:typename:QVariant
iterateOverNodeData	FlowScene.cpp	/^iterateOverNodeData(std::function<void(NodeDataModel*)> const & visitor)$/;"	f	class:FlowScene	typeref:typename:void
iterateOverNodeDataDependentOrder	FlowScene.cpp	/^iterateOverNodeDataDependentOrder(std::function<void(NodeDataModel*)> const & visitor)$/;"	f	class:FlowScene	typeref:typename:void
iterateOverNodes	FlowScene.cpp	/^iterateOverNodes(std::function<void(Node*)> const & visitor)$/;"	f	class:FlowScene	typeref:typename:void
keyPressEvent	FlowView.cpp	/^keyPressEvent(QKeyEvent *event)$/;"	f	class:FlowView	typeref:typename:void
keyReleaseEvent	FlowView.cpp	/^keyReleaseEvent(QKeyEvent *event)$/;"	f	class:FlowView	typeref:typename:void
lineWidth	ConnectionStyle.cpp	/^lineWidth() const$/;"	f	class:ConnectionStyle	typeref:typename:float
load	FlowScene.cpp	/^load()$/;"	f	class:FlowScene	typeref:typename:void
loadFromMemory	FlowScene.cpp	/^loadFromMemory(const QByteArray& data)$/;"	f	class:FlowScene	typeref:typename:void
loadJsonFile	ConnectionStyle.cpp	/^loadJsonFile(QString styleFile)$/;"	f	class:ConnectionStyle	typeref:typename:void
loadJsonFile	FlowViewStyle.cpp	/^loadJsonFile(QString styleFile)$/;"	f	class:FlowViewStyle	typeref:typename:void
loadJsonFile	NodeStyle.cpp	/^loadJsonFile(QString styleFile)$/;"	f	class:NodeStyle	typeref:typename:void
loadJsonFromByteArray	ConnectionStyle.cpp	/^loadJsonFromByteArray(QByteArray const &byteArray)$/;"	f	class:ConnectionStyle	typeref:typename:void
loadJsonFromByteArray	FlowViewStyle.cpp	/^loadJsonFromByteArray(QByteArray const &byteArray)$/;"	f	class:FlowViewStyle	typeref:typename:void
loadJsonFromByteArray	NodeStyle.cpp	/^loadJsonFromByteArray(QByteArray const &byteArray)$/;"	f	class:NodeStyle	typeref:typename:void
loadJsonText	ConnectionStyle.cpp	/^loadJsonText(QString jsonText)$/;"	f	class:ConnectionStyle	typeref:typename:void
loadJsonText	FlowViewStyle.cpp	/^loadJsonText(QString jsonText)$/;"	f	class:FlowViewStyle	typeref:typename:void
loadJsonText	NodeStyle.cpp	/^loadJsonText(QString jsonText)$/;"	f	class:NodeStyle	typeref:typename:void
locateNodeAt	FlowScene.cpp	/^locateNodeAt(QPointF scenePoint, FlowScene &scene,$/;"	f	namespace:QtNodes	typeref:typename:Node *
lock	ConnectionGraphicsObject.cpp	/^void ConnectionGraphicsObject::lock(bool locked)$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
lock	NodeGraphicsObject.cpp	/^lock(bool locked)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
mouseDoubleClickEvent	NodeGraphicsObject.cpp	/^mouseDoubleClickEvent(QGraphicsSceneMouseEvent* event)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
mouseMoveEvent	ConnectionGraphicsObject.cpp	/^mouseMoveEvent(QGraphicsSceneMouseEvent* event)$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
mouseMoveEvent	FlowView.cpp	/^mouseMoveEvent(QMouseEvent *event)$/;"	f	class:FlowView	typeref:typename:void
mouseMoveEvent	NodeGraphicsObject.cpp	/^mouseMoveEvent(QGraphicsSceneMouseEvent * event)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
mousePressEvent	ConnectionGraphicsObject.cpp	/^mousePressEvent(QGraphicsSceneMouseEvent* event)$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
mousePressEvent	FlowView.cpp	/^mousePressEvent(QMouseEvent *event)$/;"	f	class:FlowView	typeref:typename:void
mousePressEvent	NodeGraphicsObject.cpp	/^mousePressEvent(QGraphicsSceneMouseEvent * event)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
mouseReleaseEvent	ConnectionGraphicsObject.cpp	/^mouseReleaseEvent(QGraphicsSceneMouseEvent* event)$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
mouseReleaseEvent	NodeGraphicsObject.cpp	/^mouseReleaseEvent(QGraphicsSceneMouseEvent* event)$/;"	f	class:NodeGraphicsObject	typeref:typename:void
move	ConnectionGraphicsObject.cpp	/^move()$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
moveConnections	NodeGraphicsObject.cpp	/^moveConnections() const$/;"	f	class:NodeGraphicsObject	typeref:typename:void
moveEndPoint	ConnectionGeometry.cpp	/^moveEndPoint(PortType portType, QPointF const &offset)$/;"	f	class:ConnectionGeometry	typeref:typename:void
nSinks	NodeGeometry.cpp	/^NodeGeometry::nSinks() const$/;"	f	class:NodeGeometry	typeref:typename:unsigned int
nSources	NodeGeometry.cpp	/^NodeGeometry::nSources() const$/;"	f	class:NodeGeometry	typeref:typename:unsigned int
node	NodeGraphicsObject.cpp	/^node() const$/;"	f	class:NodeGraphicsObject	typeref:typename:Node const &
node	NodeGraphicsObject.cpp	/^node()$/;"	f	class:NodeGraphicsObject	typeref:typename:Node &
nodeDataModel	Node.cpp	/^nodeDataModel() const$/;"	f	class:Node	typeref:typename:NodeDataModel *
nodeGeometry	Node.cpp	/^nodeGeometry() const$/;"	f	class:Node	typeref:typename:NodeGeometry const &
nodeGeometry	Node.cpp	/^nodeGeometry()$/;"	f	class:Node	typeref:typename:NodeGeometry &
nodeGraphicsObject	Node.cpp	/^nodeGraphicsObject() const$/;"	f	class:Node	typeref:typename:NodeGraphicsObject const &
nodeGraphicsObject	Node.cpp	/^nodeGraphicsObject()$/;"	f	class:Node	typeref:typename:NodeGraphicsObject &
nodePortIndexUnderScenePoint	NodeConnectionInteraction.cpp	/^nodePortIndexUnderScenePoint(PortType portType,$/;"	f	class:NodeConnectionInteraction	typeref:typename:PortIndex
nodePortIsEmpty	NodeConnectionInteraction.cpp	/^nodePortIsEmpty(PortType portType, PortIndex portIndex) const$/;"	f	class:NodeConnectionInteraction	typeref:typename:bool
nodePortScenePosition	NodeConnectionInteraction.cpp	/^nodePortScenePosition(PortType portType, PortIndex portIndex) const$/;"	f	class:NodeConnectionInteraction	typeref:typename:QPointF
nodeState	Node.cpp	/^nodeState() const$/;"	f	class:Node	typeref:typename:NodeState const &
nodeState	Node.cpp	/^nodeState()$/;"	f	class:Node	typeref:typename:NodeState &
nodeStyle	NodeDataModel.cpp	/^nodeStyle() const$/;"	f	class:NodeDataModel	typeref:typename:NodeStyle const &
nodeStyle	StyleCollection.cpp	/^nodeStyle()$/;"	f	class:StyleCollection	typeref:typename:NodeStyle const &
nodes	FlowScene.cpp	/^nodes() const$/;"	f	class:FlowScene	typeref:typename:std::unordered_map<QUuid,std::unique_ptr<Node>> const &
normalColor	ConnectionStyle.cpp	/^normalColor() const$/;"	f	class:ConnectionStyle	typeref:typename:QColor
normalColor	ConnectionStyle.cpp	/^normalColor(QString typeId) const$/;"	f	class:ConnectionStyle	typeref:typename:QColor
onDataUpdated	Node.cpp	/^onDataUpdated(PortIndex index)$/;"	f	class:Node	typeref:typename:void
onNodeSizeUpdated	Node.cpp	/^onNodeSizeUpdated()$/;"	f	class:Node	typeref:typename:void
paint	ConnectionGraphicsObject.cpp	/^paint(QPainter* painter,$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
paint	ConnectionPainter.cpp	/^paint(QPainter* painter,$/;"	f	class:ConnectionPainter	typeref:typename:void
paint	NodeGraphicsObject.cpp	/^paint(QPainter * painter,$/;"	f	class:NodeGraphicsObject	typeref:typename:void
paint	NodePainter.cpp	/^paint(QPainter* painter,$/;"	f	class:NodePainter	typeref:typename:void
pointDiameter	ConnectionStyle.cpp	/^pointDiameter() const$/;"	f	class:ConnectionStyle	typeref:typename:float
pointsC1C2	ConnectionGeometry.cpp	/^pointsC1C2() const$/;"	f	class:ConnectionGeometry	typeref:typename:std::pair<QPointF,QPointF>
portScenePosition	NodeGeometry.cpp	/^portScenePosition(PortIndex index,$/;"	f	class:NodeGeometry	typeref:typename:QPointF
portWidth	NodeGeometry.cpp	/^portWidth(PortType portType) const$/;"	f	class:NodeGeometry	typeref:typename:unsigned int
propagateData	Connection.cpp	/^propagateData(std::shared_ptr<NodeData> nodeData) const$/;"	f	class:Connection	typeref:typename:void
propagateData	Node.cpp	/^propagateData(std::shared_ptr<NodeData> nodeData,$/;"	f	class:Node	typeref:typename:void
propagateEmptyData	Connection.cpp	/^propagateEmptyData() const$/;"	f	class:Connection	typeref:typename:void
put	Properties.cpp	/^put(QString const &name, QVariant const &v)$/;"	f	class:Properties	typeref:typename:void
reactToPossibleConnection	Node.cpp	/^reactToPossibleConnection(PortType reactingPortType,$/;"	f	class:Node	typeref:typename:void
reactingDataType	NodeState.cpp	/^reactingDataType() const$/;"	f	class:NodeState	typeref:typename:NodeDataType
reactingPortType	NodeState.cpp	/^reactingPortType() const$/;"	f	class:NodeState	typeref:typename:PortType
reaction	NodeState.cpp	/^reaction() const$/;"	f	class:NodeState	typeref:typename:NodeState::ReactToConnectionState
recalculateSize	NodeGeometry.cpp	/^recalculateSize() const$/;"	f	class:NodeGeometry	typeref:typename:void
recalculateSize	NodeGeometry.cpp	/^recalculateSize(QFont const & font) const$/;"	f	class:NodeGeometry	typeref:typename:void
registeredModelCreators	DataModelRegistry.cpp	/^registeredModelCreators() const$/;"	f	class:DataModelRegistry	typeref:typename:DataModelRegistry::RegisteredModelCreatorsMap const &
registeredModelsCategoryAssociation	DataModelRegistry.cpp	/^registeredModelsCategoryAssociation() const$/;"	f	class:DataModelRegistry	typeref:typename:DataModelRegistry::RegisteredModelsCategoryMap const &
registry	FlowScene.cpp	/^registry() const$/;"	f	class:FlowScene	typeref:typename:DataModelRegistry &
removeFromNodes	Connection.cpp	/^removeFromNodes() const$/;"	f	class:Connection	typeref:typename:void
removeNode	FlowScene.cpp	/^removeNode(Node& node)$/;"	f	class:FlowScene	typeref:typename:void
requiredPort	Connection.cpp	/^requiredPort() const$/;"	f	class:Connection	typeref:typename:PortType
resetLastHoveredNode	ConnectionState.cpp	/^resetLastHoveredNode()$/;"	f	class:ConnectionState	typeref:typename:void
resetReactionToConnection	Node.cpp	/^resetReactionToConnection()$/;"	f	class:Node	typeref:typename:void
resizeRect	NodeGeometry.cpp	/^resizeRect() const$/;"	f	class:NodeGeometry	typeref:typename:QRect
resizing	NodeState.cpp	/^resizing() const$/;"	f	class:NodeState	typeref:typename:bool
restore	Node.cpp	/^restore(QJsonObject const& json)$/;"	f	class:Node	typeref:typename:void
restoreConnection	FlowScene.cpp	/^restoreConnection(QJsonObject const &connectionJson)$/;"	f	class:FlowScene	typeref:typename:std::shared_ptr<Connection>
restoreNode	FlowScene.cpp	/^restoreNode(QJsonObject const& nodeJson)$/;"	f	class:FlowScene	typeref:typename:Node &
save	Connection.cpp	/^save() const$/;"	f	class:Connection	typeref:typename:QJsonObject
save	FlowScene.cpp	/^save() const$/;"	f	class:FlowScene	typeref:typename:void
save	Node.cpp	/^save() const$/;"	f	class:Node	typeref:typename:QJsonObject
save	NodeDataModel.cpp	/^save() const$/;"	f	class:NodeDataModel	typeref:typename:QJsonObject
saveToMemory	FlowScene.cpp	/^saveToMemory() const$/;"	f	class:FlowScene	typeref:typename:QByteArray
scaleDown	FlowView.cpp	/^scaleDown()$/;"	f	class:FlowView	typeref:typename:void
scaleUp	FlowView.cpp	/^scaleUp()$/;"	f	class:FlowView	typeref:typename:void
scene	FlowView.cpp	/^scene()$/;"	f	class:FlowView	typeref:typename:FlowScene *
selectedColor	ConnectionStyle.cpp	/^selectedColor() const$/;"	f	class:ConnectionStyle	typeref:typename:QColor
selectedHaloColor	ConnectionStyle.cpp	/^selectedHaloColor() const$/;"	f	class:ConnectionStyle	typeref:typename:QColor
selectedNodes	FlowScene.cpp	/^selectedNodes() const$/;"	f	class:FlowScene	typeref:typename:std::vector<Node * >
sendConnectionCreatedToNodes	FlowScene.cpp	/^sendConnectionCreatedToNodes(Connection const& c)$/;"	f	class:FlowScene	typeref:typename:void
sendConnectionDeletedToNodes	FlowScene.cpp	/^sendConnectionDeletedToNodes(Connection const& c)$/;"	f	class:FlowScene	typeref:typename:void
setConnection	NodeState.cpp	/^setConnection(PortType portType,$/;"	f	class:NodeState	typeref:typename:void
setConnectionStyle	ConnectionStyle.cpp	/^setConnectionStyle(QString jsonText)$/;"	f	class:ConnectionStyle	typeref:typename:void
setConnectionStyle	StyleCollection.cpp	/^setConnectionStyle(ConnectionStyle connectionStyle)$/;"	f	class:StyleCollection	typeref:typename:void
setEndPoint	ConnectionGeometry.cpp	/^setEndPoint(PortType portType, QPointF const& point)$/;"	f	class:ConnectionGeometry	typeref:typename:void
setFlowViewStyle	StyleCollection.cpp	/^setFlowViewStyle(FlowViewStyle flowViewStyle)$/;"	f	class:StyleCollection	typeref:typename:void
setGeometryChanged	ConnectionGraphicsObject.cpp	/^setGeometryChanged()$/;"	f	class:ConnectionGraphicsObject	typeref:typename:void
setGeometryChanged	NodeGraphicsObject.cpp	/^setGeometryChanged()$/;"	f	class:NodeGraphicsObject	typeref:typename:void
setGraphicsObject	Connection.cpp	/^setGraphicsObject(std::unique_ptr<ConnectionGraphicsObject>&& graphics)$/;"	f	class:Connection	typeref:typename:void
setGraphicsObject	Node.cpp	/^setGraphicsObject(std::unique_ptr<NodeGraphicsObject>&& graphics)$/;"	f	class:Node	typeref:typename:void
setLastHoveredNode	ConnectionState.cpp	/^setLastHoveredNode(Node* node)$/;"	f	class:ConnectionState	typeref:typename:void
setNodePosition	FlowScene.cpp	/^setNodePosition(Node& node, const QPointF& pos) const$/;"	f	class:FlowScene	typeref:typename:void
setNodeStyle	NodeDataModel.cpp	/^setNodeStyle(NodeStyle const& style)$/;"	f	class:NodeDataModel	typeref:typename:void
setNodeStyle	NodeStyle.cpp	/^setNodeStyle(QString jsonText)$/;"	f	class:NodeStyle	typeref:typename:void
setNodeStyle	StyleCollection.cpp	/^setNodeStyle(NodeStyle nodeStyle)$/;"	f	class:StyleCollection	typeref:typename:void
setNodeToPort	Connection.cpp	/^setNodeToPort(Node& node,$/;"	f	class:Connection	typeref:typename:void
setReaction	NodeState.cpp	/^setReaction(ReactToConnectionState reaction,$/;"	f	class:NodeState	typeref:typename:void
setRegistry	FlowScene.cpp	/^setRegistry(std::shared_ptr<DataModelRegistry> registry)$/;"	f	class:FlowScene	typeref:typename:void
setRequiredPort	Connection.cpp	/^setRequiredPort(PortType dragging)$/;"	f	class:Connection	typeref:typename:void
setResizing	NodeState.cpp	/^setResizing(bool resizing)$/;"	f	class:NodeState	typeref:typename:void
setScene	FlowView.cpp	/^FlowView::setScene(FlowScene *scene)$/;"	f	class:FlowView	typeref:typename:void
setStyle	FlowViewStyle.cpp	/^setStyle(QString jsonText)$/;"	f	class:FlowViewStyle	typeref:typename:void
setTypeConverter	Connection.cpp	/^setTypeConverter(TypeConverter converter)$/;"	f	class:Connection	typeref:typename:void
setupConnectionSignals	FlowScene.cpp	/^setupConnectionSignals(Connection const& c)$/;"	f	class:FlowScene	typeref:typename:void
shape	ConnectionGraphicsObject.cpp	/^shape() const$/;"	f	class:ConnectionGraphicsObject	typeref:typename:QPainterPath
showEvent	FlowView.cpp	/^showEvent(QShowEvent *event)$/;"	f	class:FlowView	typeref:typename:void
tryConnect	NodeConnectionInteraction.cpp	/^tryConnect() const$/;"	f	class:NodeConnectionInteraction	typeref:typename:bool
useDataDefinedColors	ConnectionStyle.cpp	/^useDataDefinedColors() const$/;"	f	class:ConnectionStyle	typeref:typename:bool
validationHeight	NodeGeometry.cpp	/^validationHeight() const$/;"	f	class:NodeGeometry	typeref:typename:unsigned int
validationWidth	NodeGeometry.cpp	/^validationWidth() const$/;"	f	class:NodeGeometry	typeref:typename:unsigned int
values	Properties.hpp	/^  values() const$/;"	f	class:QtNodes::Properties	typeref:typename:QVariantMap const &
values	Properties.hpp	/^  values()$/;"	f	class:QtNodes::Properties	typeref:typename:QVariantMap &
wheelEvent	FlowView.cpp	/^wheelEvent(QWheelEvent *event)$/;"	f	class:FlowView	typeref:typename:void
widgetPosition	NodeGeometry.cpp	/^widgetPosition() const$/;"	f	class:NodeGeometry	typeref:typename:QPointF
~Connection	Connection.cpp	/^~Connection()$/;"	f	class:Connection
~ConnectionGraphicsObject	ConnectionGraphicsObject.cpp	/^~ConnectionGraphicsObject()$/;"	f	class:ConnectionGraphicsObject
~ConnectionState	ConnectionState.cpp	/^~ConnectionState()$/;"	f	class:ConnectionState
~FlowScene	FlowScene.cpp	/^~FlowScene()$/;"	f	class:FlowScene
~NodeGraphicsObject	NodeGraphicsObject.cpp	/^~NodeGraphicsObject()$/;"	f	class:NodeGraphicsObject
